graph[“start”] = {}
graph[“start”][“a”] = 6
graph[“start”][“b”] = 2
>>> print graph[“start”].keys()
[“a”, “b”]

>>> print graph[“start”][“a”]
2
>>> print graph[“start”][“b”]
6
--------------------------------------------------
graph[“a”] = {}
graph[“a”][“fin”] = 1
graph[“b”] = {}
graph[“b”][“a”] = 3
graph[“b”][“fin”] = 5
graph[“fin”] = {}
--------------------------------------------------

find_lowest_cost_node algorithm:

node = find_lowest_cost_node(costs) 
while node is not None: 
 cost = costs[node]
 neighbors = graph[node] 
 for n in neighbors.keys(): 
 new_cost = cost + neighbors[n] 
 if costs[n] > new_cost:
 costs[n] = new_cost
 parents[n] = node 
 processed.append(node) 
 node = find_lowest_cost_node(costs) 
 
 find_lowest_cost_node_another_algorithm:
 
 def find_lowest_cost_node(costs):
 lowest_cost = float(“inf”)
 lowest_cost_node = None
 for node in costs: Go through each node.
 cost = costs[node]
 if cost < lowest_cost and node not in processed: 
 lowest_cost = cost … set it as the new lowest-cost node.
 lowest_cost_node = node
 return lowest_cost_node
 
